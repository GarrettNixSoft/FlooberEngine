package com.floober.engine.renderEngine.particles.behavior;

import com.floober.engine.renderEngine.particles.types.Particle;
import com.floober.engine.renderEngine.particles.behavior.appearance.AppearanceBehavior;
import com.floober.engine.renderEngine.particles.behavior.movement.MovementBehavior;
import com.floober.engine.util.math.RandomUtil;

public class ParticleBehavior {

	// sub-managers
	private final MovementBehavior movementBehavior;
	private final AppearanceBehavior appearanceBehavior;

	// general settings
	private float particleLifeMin, particleLifeMax;

	public ParticleBehavior(MovementBehavior movementBehavior, AppearanceBehavior appearanceBehavior) {
		this.movementBehavior = movementBehavior;
		this.appearanceBehavior = appearanceBehavior;
	}

	// INITIALIZERS

	/**
	 * Set initial boundary values for the particle life span. This
	 * function ignores greater than or less than checks.
	 * @param particleLifeMin The minimum particle life span.
	 * @param particleLifeMax The maximum particle life span.
	 */
	public void initLife(float particleLifeMin, float particleLifeMax) {
		this.particleLifeMin = particleLifeMin;
		this.particleLifeMax = particleLifeMax;
	}

	// GETTERS

	// components
	public MovementBehavior getMovementBehavior() {
		return movementBehavior;
	}
	public AppearanceBehavior getAppearanceBehavior() {
		return appearanceBehavior;
	}

	/**
	 * @return The minimum particle life duration, in seconds.
	 */
	public float getParticleLifeMin() {
		return particleLifeMin;
	}

	/**
	 * @return The maximum particle life duration, in seconds.
	 */
	public float getParticleLifeMax() {
		return particleLifeMax;
	}

	// SETTERS

	/**
	 * Set the minimum life duration of particles generated by this source.
	 * If the specified duration is shorter than 0, or if it is longer than
	 * the current maximum life duration, this call is ignored.
	 * @param particleLifeMin The minimum particle life span, in seconds.
	 */
	public void setParticleLifeMin(float particleLifeMin) {
		if (particleLifeMin > 0 && particleLifeMin <= particleLifeMax)
			this.particleLifeMin = particleLifeMin;
	}

	/**
	 * Set the maximum life duration of particles generated by this source.
	 * If the specified duration is shorter than the current minimum duration,
	 * this call is ignored.
	 * @param particleLifeMax The maximum particle life duration, in seconds.
	 */
	public void setParticleLifeMax(float particleLifeMax) {
		if (particleLifeMax >= particleLifeMin)
			this.particleLifeMax = particleLifeMax;
	}

	// GENERATING PARTICLES
	public void initParticle(Particle particle) {
		// run universal initializers
		appearanceBehavior.setParticleSize(particle);
		appearanceBehavior.setParticleColor(particle);
		// run the sub-initializers
		movementBehavior.initParticle(particle);
		appearanceBehavior.initParticle(particle);
		// set the particle's life span
		setParticleLifeSpan(particle);
	}

	private void setParticleLifeSpan(Particle particle) {
		float lifeSpan = RandomUtil.getFloat(particleLifeMin, particleLifeMax);
		particle.setLifeLength(lifeSpan);
	}

	// UPDATE
	public void updateParticle(Particle particle) {
		movementBehavior.updateParticle(particle);
		appearanceBehavior.updateParticle(particle);
	}

}